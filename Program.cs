
using Pfim;
using System.Diagnostics;

public static class StringExtensions
{
    public static string FirstUpper(this string input) =>
        input switch
        {
            null => throw new ArgumentNullException(nameof(input)),
            "" => throw new ArgumentException($"{nameof(input)} cannot be empty", nameof(input)),
            _ => string.Concat(input[0].ToString().ToUpper(), input.AsSpan(1))
        };
}

class EntryPoint
{
    struct PaletteEntry
    {
        public byte r, g, b, a;
    }

    static void Main(string[] args)
    {
        foreach (string path in Directory.GetFiles(@"D:\nwn_svn\base\key\xp2patch.bif\").Where(f => Path.GetFileName(f).StartsWith("pal_")))
        {
            string outPath = Path.Combine(@"D:\neverwinter-zombies\src\gui", $"inc_{Path.GetFileNameWithoutExtension(path).Replace("pal_", "p_")}.nss");
            Generate(path, Path.GetFileNameWithoutExtension(path).Replace("pal_", "").FirstUpper(), outPath);
            Console.WriteLine($"{path} -> {outPath}");
        }
    }

    static void Generate(string inPath, string postfix, string outPath)
{
        using (var image = Pfim.Pfim.FromFile(inPath))
        {
            Debug.Assert(image.Format == ImageFormat.Rgba32);
            Debug.Assert(image.Height == 176);

            PaletteEntry[] entries = new PaletteEntry[image.Height];

            int rowWithAverageColour = image.Width / 2;

            for (int y = 0; y < image.Height; ++y)
            {
                int idx = y * image.Width + rowWithAverageColour;
                Debug.Assert(idx < image.DataLen);
                entries[y] = new PaletteEntry()
                {
                    b = image.Data[idx * 4],
                    g = image.Data[idx * 4 + 1],
                    r = image.Data[idx * 4 + 2],
                    a = 255
                };
            }

            List<string> lines = new();

            lines.Add($"// This file was autogenerated based on {Path.GetFileName(inPath)}.");
            lines.Add("#include \"nw_inc_nui\"");
            lines.Add("");
            lines.Add($"json GetPaletteColor{postfix}ForNui(int nPalette);");
            lines.Add("");
            lines.Add($"json GetPaletteColor{postfix}ForNui(int nPalette)");
            lines.Add("{");
            lines.Add("    switch (nPalette)");
            lines.Add("    {");

            for (int i = 0; i < entries.Length; ++i)
            {
                lines.Add($"    case {i}: return NuiColor({entries[i].r}, {entries[i].g}, {entries[i].b}, {entries[i].a});");
            }

            lines.Add("    }");
            lines.Add("    return NuiColor(0, 0, 0, 0);");
            lines.Add("}");

            File.WriteAllLines(outPath, lines);

        }
    }
}

